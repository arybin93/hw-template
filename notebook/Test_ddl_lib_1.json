{
	"name": "Test_ddl_lib_1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Spark2",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "84447acc-b81b-46ce-9e86-6856ec0fe162"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/3b5976cc-7fc6-419e-b7d7-df60cff1a690/resourceGroups/rg-arybin-westeurope/providers/Microsoft.Synapse/workspaces/arybin-myworkspace/bigDataPools/Spark2",
				"name": "Spark2",
				"type": "Spark",
				"endpoint": "https://arybin-myworkspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Spark2",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Test uploaded package ddl_lib"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from ddm_example import main\r\n",
					"\r\n",
					"print(main.test_func())"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from ddm_example import main\r\n",
					"\r\n",
					"print(main.get_consumer_segments_by_demographic(\"test\", \"test2\"))"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType, StructField, StringType\r\n",
					"\r\n",
					"hotels_data = [\r\n",
					"        (\"12588401\", \"119282001\", \"2020\", \"2002\", \"18\"),\r\n",
					"        (\"12588401\", \"119282002\", \"2020\", \"2002\", \"18\"),\r\n",
					"        (\"12588402\", \"119282003\", \"2020\", \"1997\", \"23\"),\r\n",
					"        (\"12588402\", \"119282004\", \"2020\", \"1997\", \"23\"),\r\n",
					"        (\"12588402\", \"119282005\", \"2020\", \"1997\", \"23\"),\r\n",
					"    ]\r\n",
					"\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"consumer_id\", StringType(), True),\r\n",
					"    StructField(\"txn_id\", StringType(), True),\r\n",
					"    StructField(\"sale_year_int\", StringType(), True),\r\n",
					"    StructField(\"birth_year\", StringType(), True),\r\n",
					"    StructField(\"age_at_txn\", StringType(), True),\r\n",
					"])\r\n",
					"\r\n",
					"df = spark.createDataFrame(data=hotels_data, schema=schema)\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.show(truncate=False)"
				],
				"execution_count": 5
			}
		]
	}
}